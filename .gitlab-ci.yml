stages:
  - test
  - test-deploy
  - build
  - release

cache:
  paths:
    - .m2/

test:jdk-8:mongo-3.2:
  stage: test
  image: maven:3.5.3-jdk-8
  services:
    - mongo:3.2
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2
  
test:jdk-8:mongo-3.6:
  stage: test
  image: maven:3.5.3-jdk-8
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2    
  artifacts:
    paths:
    - "server/target"
    - "example/target"

test:jdk-9:mongo-3.6:
  stage: test
  image: maven:3.5.3-jdk-9
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2 -Djvm.options="--illegal-access=permit"


test:jdk-10:mongo-3.6:
  stage: test
  image: maven:3.5.3-jdk-10
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2 -Djvm.options="--illegal-access=permit"

test:jdk-11:mongo-3.6:
  stage: test
  image: maven:3.5.3-jdk-11
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2 -Djvm.options="--illegal-access=permit"

test:jdk-11:mongo-4.4:
  stage: test
  image: maven:3.5.3-jdk-11
  services:
    - mongo:4.4
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2 -Djvm.options="--illegal-access=permit"


test:deploy:
  stage: test-deploy
  image: cylab/java8-mongo
  dependencies:
    # so we don't have to compile the code ourselfs..
    - test:jdk-8:mongo-3.6
  script:
    # install what we need
    - apt-get update
    - apt-get install -y mongodb openjdk-8-jdk
    - service mongodb start
    # run example server
    - bash example/run.sh &
    - sleep 30
    - kill %1
    # test we have some results...
    - bash example/test.sh

build:docker:
  stage: build
  # only when we push a new tag
  only:
    - tags
  dependencies:
    - test:jdk-11:mongo-4.4
  # this job requires docker-in-docker
  tags:
    - dind
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  before_script:
    - docker info
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  script:
    # pull previous image version to enable caching inside dind
    - docker pull cylab/mark:latest || true
    - docker build --cache-from cylab/mark:latest --tag cylab/mark:CI_COMMIT_TAG --tag cylab/mark:latest .
    - docker push cylab/mark:CI_COMMIT_TAG
    - docker push cylab/mark:latest
 

release:
  stage: release
  only:
    - tags
  image: cylab/php72
  script:
    - "curl https://download.cylab.be/api/mark/server-$CI_COMMIT_TAG-standalone.zip  --request POST --header \"Authorization: Bearer $UPLOAD_TOKEN\" -F \"file=@./server/target/server-$CI_COMMIT_TAG-standalone.zip\""
